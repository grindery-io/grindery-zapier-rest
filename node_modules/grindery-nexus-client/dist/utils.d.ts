import { Action, Blockchain, Connector, Field, Trigger } from './types';
export declare const sendEngineRequest: (method: string, params: unknown, token?: string | null | undefined) => Promise<any>;
export declare const sendEngineHTTPRequest: (method: string, path: string, data: unknown, token?: string | null | undefined) => Promise<any>;
export declare const enrichDriver: (connector: Connector, blockchains: Blockchain[]) => {
    triggers: {
        operation: {
            inputFields: Field[];
        } | {
            inputFields: Field[];
            type: string;
            chains: string[];
            signature: string;
            filters: import("./types").ChainEventOperationFilter;
            inputFieldProviderUrl?: string | undefined;
            outputFields?: Field[] | undefined;
            sample?: {
                [key: string]: string | number | boolean | (string | number)[];
            } | undefined;
        } | {
            inputFields: Field[];
            type: string;
            inputFieldProviderUrl?: string | undefined;
            outputFields?: Field[] | undefined;
            sample?: {
                [key: string]: string | number | boolean | (string | number)[];
            } | undefined;
        } | {
            inputFields: Field[];
            type: string;
            operation?: import("./types").Request | undefined;
            inputFieldProviderUrl?: string | undefined;
            outputFields?: Field[] | undefined;
            sample?: {
                [key: string]: string | number | boolean | (string | number)[];
            } | undefined;
        };
        key: string;
        name: string;
        display: import("./types").Display;
        inputFields?: Field[] | undefined;
    }[];
    actions: {
        operation: {
            inputFields: Field[];
        } | {
            inputFields: Field[];
            type: string;
            accounts?: string[] | undefined;
            signature?: string | undefined;
            arguments?: import("./types").ChainCallOperationArgs[] | undefined;
            inputFieldProviderUrl?: string | undefined;
            outputFields?: Field[] | undefined;
            sample?: {
                [key: string]: string | number | boolean | (string | number)[];
            } | undefined;
        } | {
            inputFields: Field[];
            type: string;
            operation: import("./types").Request;
            inputFieldProviderUrl?: string | undefined;
            outputFields?: Field[] | undefined;
            sample?: {
                [key: string]: string | number | boolean | (string | number)[];
            } | undefined;
        };
        key: string;
        name: string;
        display: import("./types").Display;
        inputFields?: Field[] | undefined;
    }[];
    key: string;
    name: string;
    version: string;
    platformVersion: string;
    type: string;
    recipes?: import("./types").Recipe[] | undefined;
    authentication?: import("./types").Authentication | undefined;
    icon?: string | undefined;
    pricing?: string | undefined;
    html_url?: string | undefined;
    user?: string | undefined;
    workspace?: string | undefined;
    access?: string | undefined;
};
export declare const processDriver: (connector: Connector) => {
    triggers: Trigger[] | undefined;
    actions: Action[] | undefined;
    key: string;
    name: string;
    version: string;
    platformVersion: string;
    type: string;
    recipes?: import("./types").Recipe[] | undefined;
    authentication?: import("./types").Authentication | undefined;
    icon?: string | undefined;
    pricing?: string | undefined;
    html_url?: string | undefined;
    user?: string | undefined;
    workspace?: string | undefined;
    access?: string | undefined;
};
