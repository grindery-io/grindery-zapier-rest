export declare type Workflow = {
    key?: any;
    title: string;
    trigger: Operation;
    actions: Operation[];
    creator: string;
    state?: any;
};
export declare type Operation = {
    type: 'action' | 'trigger' | 'recipe';
    connector: string;
    operation: string;
    input: {
        [key: string]: string | number | boolean | (string | number | boolean)[];
    };
    display?: {
        [key: string]: string;
    };
    authentication?: string;
    credentials?: {
        [key: string]: string | number | boolean;
    };
};
export declare type WorkflowExecution = {
    executionId: string;
    startedAt: number;
};
export declare type WorkflowExecutionLog = {
    workflowKey: string;
    sessionId: string;
    executionId: string;
    startedAt: number;
    endedAt?: number;
    stepIndex?: number;
    input?: any;
    output?: any;
    error?: any;
};
export declare type Connector = {
    key: string;
    name: string;
    version: string;
    platformVersion: string;
    type: string;
    triggers?: Trigger[];
    actions?: Action[];
    recipes?: Recipe[];
    authentication?: Authentication;
    icon?: string;
    pricing?: string;
    html_url?: string;
    user?: string;
    workspace?: string;
    access?: string;
};
export declare type Trigger = {
    key: string;
    name: string;
    display: Display;
    operation?: TriggerOperation;
    inputFields?: Field[];
};
export declare type TriggerOperation = ChainEventOperation | HookOperation | PollingOperation;
export declare type ChainEventOperation = {
    type: string;
    chains: Chain[];
    signature: string;
    filters: ChainEventOperationFilter;
    inputFields?: Field[];
    inputFieldProviderUrl?: string;
    outputFields?: Field[];
    sample?: {
        [key: string]: string | number | boolean | (string | number)[];
    };
};
export declare type ChainEventOperationFilter = {
    fromBlock?: string | number;
    toBlock?: string | number;
    address?: string | string[];
    topics?: string[];
};
export declare type HookOperation = {
    type: string;
    inputFields?: Field[];
    inputFieldProviderUrl?: string;
    outputFields?: Field[];
    sample?: {
        [key: string]: string | number | boolean | (string | number)[];
    };
};
export declare type PollingOperation = {
    type: string;
    operation?: Request;
    inputFields?: Field[];
    inputFieldProviderUrl?: string;
    outputFields?: Field[];
    sample?: {
        [key: string]: string | number | boolean | (string | number)[];
    };
};
export declare type Action = {
    key: string;
    name: string;
    display: Display;
    operation?: ActionOperation;
    inputFields?: Field[];
};
export declare type ActionOperation = ChainCallOperation | APICallOperation;
export declare type APICallOperation = {
    type: string;
    operation: Request;
    inputFields?: Field[];
    inputFieldProviderUrl?: string;
    outputFields?: Field[];
    sample?: {
        [key: string]: string | number | boolean | (string | number)[];
    };
};
export declare type ChainCallOperation = {
    type: string;
    accounts?: ChainAccount[];
    signature?: string;
    arguments?: ChainCallOperationArgs[];
    inputFields?: Field[];
    inputFieldProviderUrl?: string;
    outputFields?: Field[];
    sample?: {
        [key: string]: string | number | boolean | (string | number)[];
    };
};
export declare type ChainCallOperationArgs = {
    type: string;
    value: number | string;
};
export declare type Recipe = {
    key: string;
    name: string;
    display: Display;
    inputFields?: Field[];
    trigger?: RecipeOperation;
    actions?: RecipeOperation[];
};
export declare type RecipeOperation = {
    connector?: string;
    operation: string;
    input: RecipeOperationInput;
};
export declare type RecipeOperationInput = {
    [key: string]: string | number | boolean;
};
export declare type Authentication = {
    type: string;
    test: Request;
    defaultDisplayName?: any;
    authenticatedRequestTemplate?: any;
    fields?: Field[];
    label?: string | Request;
    oauth1Config?: AuthenticationOAuth1Config;
    oauth2Config?: AuthenticationOAuth2Config;
    sessionConfig?: AuthenticationSessionConfig;
};
export declare type AuthenticationOAuth1Config = {
    getRequestToken: Request;
    authorizeUrl: Request;
    getAccessToken: Request;
};
export declare type AuthenticationOAuth2Config = {
    authorizeUrl: Request;
    getAccessToken: Request;
    refreshAccessToken?: Request;
    codeParam?: string;
    scope?: string;
    autoRefresh?: boolean;
};
export declare type AuthenticationSessionConfig = {
    operation: Request;
};
export declare type Chain = string;
export declare type ChainAccount = string;
export declare type DID = string;
export declare type Display = {
    label: string;
    description: string;
    instructions?: string;
    icon?: string;
    featured?: boolean;
    hidden?: boolean;
};
export declare type Field = {
    key: string;
    label?: string;
    helpText?: string;
    type?: string;
    required?: boolean;
    placeholder?: string;
    default?: string;
    choices?: FieldChoice[];
    list?: boolean;
    children?: Field[];
    dict?: boolean;
    computed?: boolean;
    updateFieldDefinition?: boolean;
    inputFormat?: string;
    validation?: any;
    readonly?: boolean;
};
export declare type FieldChoice = string | {
    value: string;
    label: string;
    sample: string;
    icon?: string;
};
export declare type FieldProviderRequest = {
    inputFields: Field[];
};
export declare type Request = {
    method?: string;
    url?: string;
    body?: null | string | object | (string | number | boolean | object)[];
    params?: {
        [key: string]: any;
    };
    headers?: {
        [key: string]: any;
    };
    auth?: string[] | object;
};
export declare type SelectedTrigger = Trigger & Recipe;
export declare type SelectedAction = Action & Recipe;
export declare type Blockchain = {
    value: string;
    label: string;
    icon: string;
    token?: string;
    tokenAddress?: string;
};
