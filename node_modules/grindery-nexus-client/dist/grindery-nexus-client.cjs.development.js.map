{"version":3,"file":"grindery-nexus-client.cjs.development.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import axios, { AxiosError } from 'axios';\nimport { Action, Blockchain, Connector, Field, Trigger } from './types';\n\nconst WORKFLOW_ENGINE_URL = 'https://orchestrator.grindery.org';\n\ntype ServerError = { error: any };\n\nexport const sendEngineRequest = async (\n  method: string,\n  params: unknown,\n  token?: string | null\n) => {\n  const headers: any = {};\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  try {\n    const res = await axios.post(\n      WORKFLOW_ENGINE_URL,\n      {\n        jsonrpc: '2.0',\n        method: method,\n        id: new Date(),\n        params: params,\n      },\n      {\n        headers,\n      }\n    );\n    if (res && res.data && typeof res.data.result !== 'undefined') {\n      return res.data.result;\n    } else {\n      throw new Error('Unknown error');\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const serverError = error as AxiosError<ServerError>;\n      if (\n        serverError.response &&\n        serverError.response.data &&\n        serverError.response.data.error\n      ) {\n        throw new Error(serverError.response.data.error.message);\n      }\n    } else {\n      throw new Error((error as Error).message);\n    }\n  }\n};\n\nexport const sendEngineHTTPRequest = async (\n  method: string,\n  path: string,\n  data: unknown,\n  token?: string | null\n) => {\n  const headers: any = {};\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n  }\n  try {\n    const res = await axios.request({\n      method,\n      url: WORKFLOW_ENGINE_URL + path,\n      data,\n      headers,\n    });\n    if (res && res.data && res.data.result) {\n      return res.data.result;\n    } else {\n      throw new Error('Unknown error');\n    }\n  } catch (error) {\n    if (axios.isAxiosError(error)) {\n      const serverError = error as AxiosError<ServerError>;\n      if (\n        serverError.response &&\n        serverError.response.data &&\n        serverError.response.data.error\n      ) {\n        throw new Error(serverError.response.data.error.message);\n      }\n    } else {\n      throw new Error((error as Error).message);\n    }\n  }\n};\n\nexport const enrichDriver = (\n  connector: Connector,\n  blockchains: Blockchain[]\n) => {\n  return {\n    ...connector,\n    triggers:\n      connector.triggers?.map((trigger: Trigger) => {\n        return {\n          ...trigger,\n          operation: {\n            ...trigger.operation,\n            inputFields: [\n              ...((trigger.operation?.type === 'blockchain:event' &&\n                (trigger.operation?.inputFields || []).filter(\n                  (field: Field) => field.key === '_grinderyChain'\n                ).length < 1) ||\n              connector.key === 'evmWallet'\n                ? [\n                    {\n                      key: '_grinderyChain',\n                      type: 'string',\n                      label: 'Blockchain',\n                      placeholder: 'Select a blockchain',\n                      required: true,\n                      choices: blockchains.map((chain: Blockchain) => ({\n                        value: chain.value,\n                        label: chain.label,\n                        sample: chain.value,\n                        icon: chain.icon || undefined,\n                      })),\n                    },\n                  ]\n                : []),\n              ...(trigger.operation?.type === 'blockchain:event' &&\n              (trigger.operation?.inputFields || []).filter(\n                (field: Field) => field.key === '_grinderyContractAddress'\n              ).length < 1\n                ? [\n                    {\n                      key: '_grinderyContractAddress',\n                      type: 'string',\n                      label: 'Contract address',\n                      placeholder: 'Enter contract address',\n                      required: true,\n                    },\n                  ]\n                : []),\n              ...(trigger.operation?.inputFields || []).filter(\n                (field: Field) =>\n                  (connector.key === 'evmWallet' &&\n                    field.key !== '_grinderyChain') ||\n                  connector.key !== 'evmWallet'\n              ),\n            ],\n          },\n        };\n      }) || [],\n    actions:\n      connector.actions?.map((action: Action) => {\n        return {\n          ...action,\n          operation: {\n            ...action.operation,\n            inputFields: [\n              ...((action.operation?.type === 'blockchain:call' &&\n                (action.operation?.inputFields || []).filter(\n                  (field: Field) => field.key === '_grinderyChain'\n                ).length < 1) ||\n              connector.key === 'evmWallet'\n                ? [\n                    {\n                      key: '_grinderyChain',\n                      type: 'string',\n                      label: 'Blockchain',\n                      placeholder: 'Select a blockchain',\n                      required: true,\n                      choices: blockchains.map((chain: Blockchain) => ({\n                        value: chain.value,\n                        label: chain.label,\n                        sample: chain.value,\n                        icon: chain.icon || undefined,\n                      })),\n                    },\n                  ]\n                : []),\n              ...(action.operation?.type === 'blockchain:call' &&\n              (action.operation?.inputFields || []).filter(\n                (field: Field) => field.key === '_grinderyContractAddress'\n              ).length < 1\n                ? [\n                    {\n                      key: '_grinderyContractAddress',\n                      type: 'string',\n                      label: 'Contract address',\n                      placeholder: 'Enter contract address',\n                      required: true,\n                    },\n                  ]\n                : []),\n              ...(action.operation?.inputFields || []).filter(\n                (field: Field) =>\n                  (connector.key === 'evmWallet' &&\n                    field.key !== '_grinderyChain') ||\n                  connector.key !== 'evmWallet'\n              ),\n            ],\n          },\n        };\n      }) || [],\n  };\n};\n\nexport const processDriver = (connector: Connector) => {\n  return {\n    ...connector,\n    triggers:\n      connector.triggers && connector.triggers.length > 0\n        ? [\n            ...connector.triggers.filter(\n              (trigger: Trigger) => !trigger.display?.hidden\n            ),\n          ]\n        : undefined,\n    actions:\n      connector.actions && connector.actions.length > 0\n        ? [\n            ...connector.actions.filter(\n              (action: Action) => !action.display?.hidden\n            ),\n          ]\n        : undefined,\n  };\n};\n","import axios from 'axios';\nimport _ from 'lodash';\nimport jwt_decode from 'jwt-decode';\nimport {\n  WorkflowExecution,\n  WorkflowExecutionLog,\n  Operation,\n  Workflow,\n  Connector,\n  CustomJwtPayload,\n} from './types';\nimport {\n  enrichDriver,\n  processDriver,\n  sendEngineHTTPRequest,\n  sendEngineRequest,\n} from './utils';\n\nconst WEB2_CONNECTORS_PATH =\n  'https://api.github.com/repos/grindery-io/grindery-nexus-schema-v2/contents/cds/web2';\n\nconst WEB3_CONNECTORS_PATH =\n  'https://api.github.com/repos/grindery-io/grindery-nexus-schema-v2/contents/cds/web3';\n\nconst CHAINS_PATH = 'https://cds.grindery.org/chains';\nconst CHAINS_STAGING_PATH = 'https://cds-staging.grindery.org/chains';\n\nconst DRIVERS_URL = 'https://cds.grindery.org';\nconst DRIVERS_STAGING_URL = 'https://cds-staging.grindery.org';\n\n/**\n * Grindery Nexus Client\n *\n * @description A class to interact with Grindery Nexus engine API\n */\nclass NexusClient {\n  /**\n   * User authentication token\n   */\n  private token: string | null = null;\n\n  private userId: string | null = null;\n\n  private workspaceId: string | null = null;\n\n  /**\n   * Set authentication token\n   *\n   * @param {string} token - Authentication token\n   * @returns {void}\n   */\n  authenticate(token: string): void {\n    if (token) {\n      this.token = token;\n      const decodedToken = jwt_decode<CustomJwtPayload>(token);\n      this.userId = decodedToken.sub || null;\n      this.workspaceId = decodedToken.workspace || null;\n    } else {\n      throw new Error('Token required');\n    }\n  }\n\n  /**\n   * Get current authentication token. Authentication required.\n   * @returns {string} Authentication token\n   */\n  getToken(): string {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return this.token;\n  }\n\n  /**\n   * Creates new workflow. Authentication required.\n   * @param {Workflow} workflow - New workflow object\n   * @param {string} workspaceKey - Workspace key. Optional\n   * @returns {Promise} Promise object with new workflow key\n   */\n  async createWorkflow(\n    workflow: Workflow,\n    workspaceKey?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workflow) {\n      throw new Error('Workflow object is required');\n    }\n    if (!workflow.creator) {\n      throw new Error('Workflow creator is required');\n    }\n    return await sendEngineRequest(\n      'or_createWorkflow',\n      {\n        workflow: workflow,\n        ...(typeof workspaceKey !== 'undefined' && { workspaceKey }),\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Lists user's workflows. Authentication required.\n   *\n   * @param {string} workspaceKey - Workspace key. Optional.\n   * @returns {Promise} Promise object with an array of user's workflows\n   */\n  async listWorkflows(workspaceKey?: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest(\n      'or_listWorkflows',\n      {\n        ...(typeof workspaceKey !== 'undefined' && { workspaceKey }),\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Updates a single workflow. Authentication required.\n   *\n   * @param {string} key - Workflow key\n   * @param {Workflow} workflow - Updated workflow object\n   * @returns {Promise} Promise object with workflow key\n   */\n  async updateWorkflow(key: string, workflow: Workflow): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workflow key is required');\n    }\n    if (!workflow || !workflow.creator) {\n      throw new Error('Workflow creator is required');\n    }\n    return await sendEngineRequest(\n      'or_updateWorkflow',\n      {\n        key,\n        workflow,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets workflow executions. Authentication required.\n   *\n   * @param {string} workflowKey - Workflow key\n   * @param {number} since - Since parameter used for pagination. Optional.\n   * @param {number} until - Until parameter used for pagination. Optional.\n   * @param {number} limit - Limit parameter used for pagination. Optional.\n   * @returns {Promise} Promise object with an array of workflow executions\n   */\n  async getWorkflowExecutions(\n    workflowKey: string,\n    since?: number,\n    until?: number,\n    limit?: number\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workflowKey) {\n      throw new Error('Workflow key is required');\n    }\n    return await sendEngineRequest(\n      'or_getWorkflowExecutions',\n      {\n        workflowKey,\n        ...(typeof since !== 'undefined' && { since }),\n        ...(typeof until !== 'undefined' && { until }),\n        ...(typeof limit !== 'undefined' && { limit }),\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets workflow execution log. Authentication required.\n   *\n   * @param {string} executionId - Workflow execution ID\n   * @returns {Promise} Promise object with workflow execution log\n   */\n  async getWorkflowExecutionLog(executionId: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!executionId) {\n      throw new Error('Workflow execution ID is required');\n    }\n    return await sendEngineRequest(\n      'or_getWorkflowExecutionLog',\n      {\n        executionId,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Checks if user is approved for early access. Authentication required.\n   *\n   * @param {string} app - Application for which the access is checked. One of: `flow`, `cds`, `gateway` or `ping`.\n   * @returns {Promise} Promise object with `true` if user is allowed and `false` if not\n   */\n  async isAllowedUser(app?: 'flow' | 'gateway' | 'cds' | 'ping'): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest(\n      'or_isAllowedUser',\n      { app: app || undefined },\n      this.token\n    );\n  }\n\n  /**\n   * Tests driver action. Authentication required.\n   *\n   * @param {Operation} step - Workflow step\n   * @param input - Sample user input\n   * @param {string} environment - Specifiy execution environment (`production` or `staging`). Optional. Default value `production`.\n   * @returns {Promise} Promise object with action execution payload\n   */\n  async testAction(\n    step: Operation,\n    input: unknown,\n    environment?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!step) {\n      throw new Error('Workflow step object is required');\n    }\n    if (!input) {\n      throw new Error('Sample input object is required');\n    }\n    return await sendEngineRequest(\n      'or_testAction',\n      {\n        step,\n        input,\n        environment: environment || 'production',\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets list of available connectors/drivers\n   * @deprecated since version 0.5.0\n   * @returns {Promise} Promise object with an array of connectors/drivers\n   */\n  async getConnectors(): Promise<any> {\n    const responses = [];\n    const web2Connectors = await axios.get(WEB2_CONNECTORS_PATH);\n    for (let i = 0; i < web2Connectors.data.length; i++) {\n      const url = web2Connectors.data[i].download_url;\n      if (url) {\n        responses.push(await axios.get(url));\n      }\n    }\n    const web3Connectors = await axios.get(WEB3_CONNECTORS_PATH);\n    for (let i = 0; i < web3Connectors.data.length; i++) {\n      const url = web3Connectors.data[i].download_url;\n      if (url) {\n        responses.push(await axios.get(url));\n      }\n    }\n\n    return responses\n      .filter(res => res && res.data)\n      .map(res => ({\n        ...res.data,\n        html_url:\n          (Array.isArray(web3Connectors.data) &&\n            web3Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ) &&\n            web3Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ).html_url) ||\n          (Array.isArray(web2Connectors.data) &&\n            web2Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ) &&\n            web2Connectors.data.find(\n              c => c.name && c.name.includes(res.data.key)\n            ).html_url) ||\n          '',\n      }));\n  }\n\n  /**\n   * Deletes user's workflow by key. Authentication required.\n   *\n   * @param {string} key - Workflow key\n   * @returns {Promise} Promise object with `deleted` property `true` or `false`\n   */\n  async deleteWorkflow(key: string): Promise<{ deleted: boolean }> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workflow key is required');\n    }\n    return await sendEngineRequest(\n      'or_deleteWorkflow',\n      {\n        key,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Requests early access to Nexus app. Authentication required.\n   *\n   * @param {string} email - User email\n   * @param {string} source - The source of request (optional)\n   * @param {string} app - The App to which access is requested (optional)\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async requestEarlyAccess(\n    email: string,\n    source?: string,\n    app?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!email) {\n      throw new Error('Email is required');\n    }\n    if (!/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/.test(email)) {\n      throw new Error('Invalid email');\n    }\n    return await sendEngineRequest(\n      'or_requestEarlyAccess',\n      {\n        email,\n        source: source || '',\n        app: app || '',\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Saves user wallet address in CRM. Authentication required.\n   *\n   * @param {string} walletAddress - User wallet address\n   * @param {string} [email] - User email, optional\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async saveWalletAddress(walletAddress: string, email?: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!walletAddress) {\n      throw new Error('Wallet address is required');\n    }\n    if (email && !/^[^\\s@]+@([^\\s@.,]+\\.)+[^\\s@.,]{2,}$/.test(email)) {\n      throw new Error('Invalid email');\n    }\n    return await sendEngineRequest(\n      'or_saveWalletAddress',\n      {\n        email,\n        walletAddress,\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Sends request to an operation's `inputFieldProviderUrl`. Authentication required.\n   *\n   * @param {string} connectorKey - Connector key\n   * @param {string} operationKey - Trigger or Action operation key\n   * @param {object} body - JSON RPC request object with user input\n   * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.\n   * @returns {Promise} Promise object with operation's field provider response\n   */\n  async callInputProvider(\n    connectorKey: string,\n    operationKey: string,\n    body: any,\n    environment?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!connectorKey) {\n      throw new Error('Connector key is required');\n    }\n    if (!operationKey) {\n      throw new Error('Operation key is required');\n    }\n    if (!body) {\n      throw new Error('JSON RPC request object is required');\n    }\n    if (!body.method || body.method !== 'grinderyNexusConnectorUpdateFields') {\n      throw new Error(\n        'JSON RPC request object must have \"method\" property with value \"grinderyNexusConnectorUpdateFields\"'\n      );\n    }\n    if (!body.jsonrpc || body.jsonrpc !== '2.0') {\n      throw new Error('JSON RPC request object must have 2.0 version');\n    }\n    if (!body.params || !body.params.key) {\n      throw new Error(\n        'JSON RPC request object must have \"params\" property with operation key specified'\n      );\n    }\n    if (body.params.key !== operationKey) {\n      throw new Error(\n        'JSON RPC request object params \"key\" property must be equal to operationKey'\n      );\n    }\n    return await sendEngineHTTPRequest(\n      'POST',\n      `/input-provider/${connectorKey}/${operationKey}${\n        environment ? '?_grinderyEnvironment=' + environment : ''\n      }`,\n      body,\n      this.token\n    );\n  }\n\n  /**\n   * Sends webhook to a trigger\n   *\n   * @param {string} connectorKey - Connector key\n   * @param {string} operationKey - Trigger operation key\n   * @param {object} body - JSON body\n   * @param {string} environment - Specifiy execution environment. Use `staging` for staging environment. Optional.\n   * @returns {Promise} Promise object with JSON RPC 2.0 response\n   */\n  async callWebhook(\n    connectorKey: string,\n    operationKey: string,\n    body: any,\n    environment?: string\n  ): Promise<any> {\n    if (!connectorKey) {\n      throw new Error('Connector key is required');\n    }\n    if (!operationKey) {\n      throw new Error('Operation key is required');\n    }\n    if (!body) {\n      throw new Error('Body object is required');\n    }\n    return await sendEngineHTTPRequest(\n      'POST',\n      `/webhook/${connectorKey}/${operationKey}${\n        environment ? '?_grinderyEnvironment=' + environment : ''\n      }`,\n      body\n    );\n  }\n\n  /**\n   * Gets list of drivers\n   *\n   * @since 0.5.0\n   * @param {string} environment - Set environment for getting drivers. Optional.\n   * @returns {Promise} Promise object with an array of drivers\n   */\n  async listDrivers(environment?: string): Promise<any> {\n    let driversIndexURL = `${DRIVERS_URL}/_index.json`;\n\n    if (environment && environment === 'staging') {\n      driversIndexURL = `${DRIVERS_STAGING_URL}/_index.json`;\n    }\n    const res = await axios.get(driversIndexURL).catch(() => {\n      return null;\n    });\n    if (res && res.data) {\n      const drivers = Object.keys(res.data)\n        .map(key =>\n          processDriver({\n            ...res.data[key],\n          })\n        )\n        .filter(\n          (driver: Connector) =>\n            driver &&\n            (!driver.access ||\n              driver.access?.toLowerCase() === 'public' ||\n              (this.userId &&\n                driver.access?.toLowerCase() === 'private' &&\n                driver.user?.toLowerCase() === this.userId.toLowerCase()) ||\n              (this.workspaceId &&\n                driver.access?.toLowerCase() === 'workspace' &&\n                driver.workspace?.toLowerCase() ===\n                  this.workspaceId.toLowerCase()))\n        );\n      return drivers;\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Gets single driver\n   *\n   * @since 0.5.0\n   * @param {string} driverKey - Driver key\n   * @param {string} environment - Set environment for getting driver. Optional.\n   * @param {boolean} enrich - If driver should be enriched with automated fields. Default is `true`.\n   * @returns {Promise} Promise object with a CDS object or `null` if driver not found\n   */\n  async getDriver(\n    driverKey: string,\n    environment?: string,\n    enrich: boolean = true\n  ): Promise<any> {\n    if (!driverKey) {\n      throw new Error('Driver key required');\n    }\n    let driverURL = `${DRIVERS_URL}/${driverKey}.json`;\n\n    if (environment && environment === 'staging') {\n      driverURL = `${DRIVERS_STAGING_URL}/${driverKey}.json`;\n    }\n    const res = await axios.get(driverURL).catch(() => {\n      return null;\n    });\n\n    if (res && res.data) {\n      if (enrich) {\n        const blockchains = await this.listChains(\n          'evm',\n          environment || 'production'\n        );\n        return enrichDriver(processDriver(res.data), blockchains || []);\n      } else {\n        return processDriver(res.data);\n      }\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Gets list of user's workspaces\n   *\n   * @since 0.6.0\n   * @returns {Promise} Promise object with an array of user's workspaces\n   */\n  async listWorkspaces(): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest('or_listWorkspaces', {}, this.token);\n  }\n\n  /**\n   * Creates new workspace\n   *\n   * @since 0.6.0\n   * @param {object} workspace - Workspace properties\n   * @returns {Promise} Promise object with a created workspace key\n   */\n  async createWorkspace(workspace: {\n    title: string;\n    iconUrl?: string;\n    about?: string;\n    admins?: string[];\n    users?: string[];\n  }): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workspace.title) {\n      throw new Error('Workspace title is required');\n    }\n    return await sendEngineRequest('or_createWorkspace', workspace, this.token);\n  }\n\n  /**\n   * Updates a workspace\n   *\n   * @since 0.6.0\n   * @param {object} workspace - Workspace properties\n   * @returns {Promise} Promise object with an updated workspace\n   */\n  async updateWorkspace(workspace: {\n    key: string;\n    title?: string;\n    iconUrl?: string;\n    about?: string;\n    admins?: string[];\n    users?: string[];\n  }): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workspace.key) {\n      throw new Error('Workspace key is required');\n    }\n    if (workspace.admins && !Array.isArray(workspace.admins)) {\n      throw new Error('Admins must be an array');\n    }\n    if (workspace.users && !Array.isArray(workspace.users)) {\n      throw new Error('Users must be an array');\n    }\n    return await sendEngineRequest('or_updateWorkspace', workspace, this.token);\n  }\n\n  /**\n   * Removes user from a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @returns {Promise} Promise object with a `left` property equals `true` on success\n   */\n  async leaveWorkspace(key: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    return await sendEngineRequest('or_leaveWorkspace', { key }, this.token);\n  }\n\n  /**\n   * Deletes workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async deleteWorkspace(key: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    return await sendEngineRequest('or_deleteWorkspace', { key }, this.token);\n  }\n\n  /**\n   * Moves workflow to a workspace\n   *\n   * @since 0.6.0\n   * @param {string} workflowKey - Workflow key\n   * @param {string} workspaceKey - The destination workspace key\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async moveWorkflowToWorkspace(\n    workflowKey: string,\n    workspaceKey: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!workflowKey) {\n      throw new Error('Workflow key is required');\n    }\n    return await sendEngineRequest(\n      'or_moveWorkflowToWorkspace',\n      { key: workflowKey, newWorkspaceKey: workspaceKey },\n      this.token\n    );\n  }\n\n  /**\n   * Adds user (member) to a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async addUserToWorkspace(key: string, userAccountId: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceAddUser',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Removes user (member) from a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async removeUserFromWorkspace(\n    key: string,\n    userAccountId: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceRemoveUser',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Adds admin to a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async addAdminToWorkspace(key: string, userAccountId: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceAddAdmin',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Removes admin from a workspace\n   *\n   * @since 0.6.0\n   * @param {string} key - Workspace key\n   * @param {string} userAccountId - User account ID\n   * @returns {Promise} Promise object with updated workspace properties\n   */\n  async removeAdminFromWorkspace(\n    key: string,\n    userAccountId: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Workspace key is required');\n    }\n    if (!userAccountId) {\n      throw new Error('User ID is required');\n    }\n    return await sendEngineRequest(\n      'or_workspaceRemoveAdmin',\n      { key: key, accountId: userAccountId },\n      this.token\n    );\n  }\n\n  /**\n   * Gets list of user's saved authentication credentials. Authentication required.\n   *\n   * @since 0.7.0\n   * @param {string} connectorId - Connector key\n   * @param {string} environment - Environment (`production` or `staging`)\n   * @returns {Promise} Promise object with a list of saved credentials\n   */\n  async listAuthCredentials(\n    connectorId: string,\n    environment: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!connectorId) {\n      throw new Error('Connector ID is required');\n    }\n    if (!environment) {\n      throw new Error('Environment is required');\n    }\n    return await sendEngineRequest(\n      'or_listAuthCredentials',\n      { connectorId: connectorId, environment: environment },\n      this.token\n    );\n  }\n\n  /**\n   * Updates saved authentication credential. Authentication required.\n   *\n   * @since 0.7.0\n   * @param {string} key - Credential key\n   * @param {string} displayName - New display name\n   * @returns {Promise} Promise object with updated credential\n   */\n  async updateAuthCredentials(key: string, displayName: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!key) {\n      throw new Error('Credential key is required');\n    }\n    if (!displayName) {\n      throw new Error('Display name is required');\n    }\n    return await sendEngineRequest(\n      'or_updateAuthCredentials',\n      { key: key, displayName: displayName },\n      this.token\n    );\n  }\n\n  /**\n   * Adds connector secrets (for admin only). Authentication required.\n   *\n   * @since 0.7.0\n   * @param {string} connectorId - Credential key\n   * @param {object} secrets - Object with key-value pairs\n   * @param {string} environment - Environment (`production` or `staging`)\n   * @returns {Promise} Promise\n   */\n  async putConnectorSecrets(\n    connectorId: string,\n    secrets: { [key: string]: unknown },\n    environment: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!connectorId) {\n      throw new Error('Connector ID is required');\n    }\n    if (!secrets) {\n      throw new Error('Secrets object is required');\n    }\n    if (!environment) {\n      throw new Error('Environment is required');\n    }\n    return await sendEngineRequest(\n      'or_putConnectorSecrets',\n      { connectorId: connectorId, secrets: secrets, environment: environment },\n      this.token\n    );\n  }\n\n  /**\n   * Saves user notifications state in CRM. Authentication required.\n   *\n   * @param {string} state - User notifications state\n   * @param {string} notificationToken - User notification token (optional)\n   * @returns {Promise} Promise object with `true` on success\n   */\n  async saveNotificationsState(\n    state: string,\n    notificationToken?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!state) {\n      throw new Error('Notifications state is required');\n    }\n    const payload: { state: string; notificationToken?: string } = {\n      state,\n    };\n    if (notificationToken) {\n      payload.notificationToken = notificationToken;\n    }\n    return await sendEngineRequest(\n      'or_saveNotificationsState',\n      payload,\n      this.token\n    );\n  }\n\n  /**\n   * Run a single action. Authentication required.\n   *\n   * @since 0.9.0\n   * @param {Operation} step - Workflow step\n   * @param input - Sample user input\n   * @param {string} environment - Specifiy execution environment (`production` or `staging`). Optional. Default value `production`.\n   * @returns {Promise} Promise object with action execution payload\n   */\n  async runAction(\n    step: Operation,\n    input: unknown,\n    environment?: string\n  ): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!step) {\n      throw new Error('Workflow step object is required');\n    }\n    if (!input) {\n      throw new Error('Sample input object is required');\n    }\n    return await sendEngineRequest(\n      'or_runAction',\n      {\n        step,\n        input,\n        environment: environment || 'production',\n      },\n      this.token\n    );\n  }\n\n  /**\n   * Gets list of supported blockchains\n   *\n   * @since 0.9.1\n   * @param {string} type - Blockchain type. One of `all`, `evm`, `non-evm`. Default value is `all`.\n   * @param {string} environment - Set environment for getting chains list. Optional.\n   * @returns {Promise} Promise object with an array of blockchains. See schema definition here: https://github.com/grindery-io/grindery-nexus-schema-v2/blob/staging/chains/README.md\n   */\n  async listChains(\n    type: 'all' | 'evm' | 'non-evm' = 'all',\n    environment?: string\n  ): Promise<any> {\n    let base = `${CHAINS_PATH}`;\n\n    if (environment && environment === 'staging') {\n      base = `${CHAINS_STAGING_PATH}`;\n    }\n    let url = base;\n    if (type === 'all') {\n      url = `${base}/_index.json`;\n    }\n    if (type === 'evm') {\n      url = `${base}/evm.json`;\n    }\n    if (type === 'non-evm') {\n      url = `${base}/non-evm.json`;\n    }\n    const res = await axios.get(url).catch(() => {\n      return null;\n    });\n\n    return (res && res.data) || [];\n  }\n\n  /**\n   * Gets user information\n   *\n   * @since 0.9.9\n   * @returns {User|null} User information object or `null` if user is not authenticated.\n   \n   */\n  getUser(): null | {\n    id: string;\n    address: string;\n    address_short: string;\n    workspace: string | null;\n  } {\n    if (!this.token || !this.userId) {\n      return null;\n    }\n    const id = this.userId;\n    const address = id.split(':')[2];\n    const address_short = `${address.substring(0, 6)}...${address.substring(\n      address.length - 4\n    )}`;\n    return {\n      id,\n      address,\n      address_short,\n      workspace: this.workspaceId || null,\n    };\n  }\n\n  /**\n   * Checks if user has email. Authentication required.\n   *\n   * @since 0.9.10\n   * @returns {Promise} Promise object with `true` if user has email and `false` if not\n   */\n  async isUserHasEmail(): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest('or_isUserHasEmail', {}, this.token);\n  }\n\n  /**\n   * Updates user email address\n   *\n   * @since 0.9.11\n   * @returns {Promise} Promise object with `true` if user email was updated or `false` if not\n   */\n  async updateUserEmail(email: string): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    if (!email) {\n      throw new Error('Email is required');\n    }\n    return await sendEngineRequest('or_updateUserEmail', { email }, this.token);\n  }\n\n  /**\n   * Deletes user account\n   *\n   * @since 0.9.11\n   * @returns {Promise} Promise object with `true` if user account was deleted\n   */\n  async deleteUser(): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest('or_deleteUser', {}, this.token);\n  }\n\n  /**\n   * Gets user email address\n   *\n   * @since 0.9.12\n   * @returns {Promise} Promise object with user email if exists, or `null` if not.\n   */\n  async getUserEmail(): Promise<any> {\n    if (!this.token) {\n      throw new Error('Authentication required');\n    }\n    return await sendEngineRequest('or_getUserEmail', {}, this.token);\n  }\n}\n\n/**\n * @typedef {Object} User\n * @property {string} id - User ID, e.g. eip155:1:0x44Ab2C419132f3fFE29420dC01AD03A5F2fdf5c0.\n * @property {string} address - User wallet address, e.g. 0x44Ab2C419132f3fFE29420dC01AD03A5F2fdf5c0.\n * @property {string} address_short - User wallet address in short format, e.g. 0x44Ab...f5c0.\n * @property {string|null} workspace - User's workspace id, or null for default workspace.\n */\n\nexport { Operation, Workflow, WorkflowExecution, WorkflowExecutionLog };\n\nexport default NexusClient;\n"],"names":["WORKFLOW_ENGINE_URL","sendEngineRequest","method","params","token","headers","Authorization","axios","post","jsonrpc","id","Date","res","data","result","Error","isAxiosError","serverError","response","error","message","sendEngineHTTPRequest","path","request","url","enrichDriver","connector","blockchains","triggers","map","trigger","operation","inputFields","type","filter","field","key","length","label","placeholder","required","choices","chain","value","sample","icon","undefined","actions","action","processDriver","display","hidden","WEB2_CONNECTORS_PATH","WEB3_CONNECTORS_PATH","CHAINS_PATH","CHAINS_STAGING_PATH","DRIVERS_URL","DRIVERS_STAGING_URL","NexusClient","authenticate","decodedToken","jwt_decode","userId","sub","workspaceId","workspace","getToken","createWorkflow","workflow","workspaceKey","creator","listWorkflows","updateWorkflow","getWorkflowExecutions","workflowKey","since","until","limit","getWorkflowExecutionLog","executionId","isAllowedUser","app","testAction","step","input","environment","getConnectors","responses","get","web2Connectors","i","download_url","push","web3Connectors","html_url","Array","isArray","find","c","name","includes","deleteWorkflow","requestEarlyAccess","email","source","test","saveWalletAddress","walletAddress","callInputProvider","connectorKey","operationKey","body","callWebhook","listDrivers","driversIndexURL","drivers","Object","keys","driver","access","toLowerCase","user","getDriver","driverKey","enrich","driverURL","listChains","listWorkspaces","createWorkspace","title","updateWorkspace","admins","users","leaveWorkspace","deleteWorkspace","moveWorkflowToWorkspace","newWorkspaceKey","addUserToWorkspace","userAccountId","accountId","removeUserFromWorkspace","addAdminToWorkspace","removeAdminFromWorkspace","listAuthCredentials","connectorId","updateAuthCredentials","displayName","putConnectorSecrets","secrets","saveNotificationsState","state","notificationToken","payload","runAction","base","getUser","address","split","address_short","substring","isUserHasEmail","updateUserEmail","deleteUser","getUserEmail"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,mBAAmB,GAAG,mCAA5B;AAIO,IAAMC,iBAAiB;EAAA,mFAAG,iBAC/BC,MAD+B,EAE/BC,MAF+B,EAG/BC,KAH+B;IAAA;IAAA;MAAA;QAAA;UAAA;YAKzBC,OALyB,GAKV,EALU;;YAM/B,IAAID,KAAJ,EAAW;cACTC,OAAO,CAACC,aAAR,eAAkCF,KAAlC;;;YAP6B;YAAA;YAAA,OAUXG,KAAK,CAACC,IAAN,CAChBR,mBADgB,EAEhB;cACES,OAAO,EAAE,KADX;cAEEP,MAAM,EAAEA,MAFV;cAGEQ,EAAE,EAAE,IAAIC,IAAJ,EAHN;cAIER,MAAM,EAAEA;aANM,EAQhB;cACEE,OAAO,EAAPA;aATc,CAVW;;UAAA;YAUvBO,GAVuB;;YAAA,MAsBzBA,GAAG,IAAIA,GAAG,CAACC,IAAX,IAAmB,OAAOD,GAAG,CAACC,IAAJ,CAASC,MAAhB,KAA2B,WAtBrB;cAAA;cAAA;;;YAAA,iCAuBpBF,GAAG,CAACC,IAAJ,CAASC,MAvBW;;UAAA;YAAA,MAyBrB,IAAIC,KAAJ,CAAU,eAAV,CAzBqB;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA,KA4BzBR,KAAK,CAACS,YAAN,aA5ByB;cAAA;cAAA;;;YA6BrBC,WA7BqB;;YAAA,MA+BzBA,WAAW,CAACC,QAAZ,IACAD,WAAW,CAACC,QAAZ,CAAqBL,IADrB,IAEAI,WAAW,CAACC,QAAZ,CAAqBL,IAArB,CAA0BM,KAjCD;cAAA;cAAA;;;YAAA,MAmCnB,IAAIJ,KAAJ,CAAUE,WAAW,CAACC,QAAZ,CAAqBL,IAArB,CAA0BM,KAA1B,CAAgCC,OAA1C,CAnCmB;;UAAA;YAAA;YAAA;;UAAA;YAAA,MAsCrB,IAAIL,KAAJ,CAAW,YAAgBK,OAA3B,CAtCqB;;UAAA;UAAA;YAAA;;;;GAAH;;EAAA,gBAAjBnB,iBAAiB;IAAA;;AAAA,GAAvB;AA2CA,IAAMoB,qBAAqB;EAAA,oFAAG,kBACnCnB,MADmC,EAEnCoB,IAFmC,EAGnCT,IAHmC,EAInCT,KAJmC;IAAA;IAAA;MAAA;QAAA;UAAA;YAM7BC,OAN6B,GAMd,EANc;;YAOnC,IAAID,KAAJ,EAAW;cACTC,OAAO,CAACC,aAAR,eAAkCF,KAAlC;;;YARiC;YAAA;YAAA,OAWfG,KAAK,CAACgB,OAAN,CAAc;cAC9BrB,MAAM,EAANA,MAD8B;cAE9BsB,GAAG,EAAExB,mBAAmB,GAAGsB,IAFG;cAG9BT,IAAI,EAAJA,IAH8B;cAI9BR,OAAO,EAAPA;aAJgB,CAXe;;UAAA;YAW3BO,GAX2B;;YAAA,MAiB7BA,GAAG,IAAIA,GAAG,CAACC,IAAX,IAAmBD,GAAG,CAACC,IAAJ,CAASC,MAjBC;cAAA;cAAA;;;YAAA,kCAkBxBF,GAAG,CAACC,IAAJ,CAASC,MAlBe;;UAAA;YAAA,MAoBzB,IAAIC,KAAJ,CAAU,eAAV,CApByB;;UAAA;YAAA;YAAA;;UAAA;YAAA;YAAA;;YAAA,KAuB7BR,KAAK,CAACS,YAAN,cAvB6B;cAAA;cAAA;;;YAwBzBC,WAxByB;;YAAA,MA0B7BA,WAAW,CAACC,QAAZ,IACAD,WAAW,CAACC,QAAZ,CAAqBL,IADrB,IAEAI,WAAW,CAACC,QAAZ,CAAqBL,IAArB,CAA0BM,KA5BG;cAAA;cAAA;;;YAAA,MA8BvB,IAAIJ,KAAJ,CAAUE,WAAW,CAACC,QAAZ,CAAqBL,IAArB,CAA0BM,KAA1B,CAAgCC,OAA1C,CA9BuB;;UAAA;YAAA;YAAA;;UAAA;YAAA,MAiCzB,IAAIL,KAAJ,CAAW,aAAgBK,OAA3B,CAjCyB;;UAAA;UAAA;YAAA;;;;GAAH;;EAAA,gBAArBC,qBAAqB;IAAA;;AAAA,GAA3B;AAsCA,IAAMI,YAAY,GAAG,SAAfA,YAAe,CAC1BC,SAD0B,EAE1BC,WAF0B;;;EAI1B,oBACKD,SADL;IAEEE,QAAQ,EACN,wBAAAF,SAAS,CAACE,QAAV,yCAAoBC,GAApB,CAAwB,UAACC,OAAD;;;MACtB,oBACKA,OADL;QAEEC,SAAS,eACJD,OAAO,CAACC,SADJ;UAEPC,WAAW,YACJ,uBAAAF,OAAO,CAACC,SAAR,wCAAmBE,IAAnB,MAA4B,kBAA5B,IACH,CAAC,wBAAAH,OAAO,CAACC,SAAR,yCAAmBC,WAAnB,KAAkC,EAAnC,EAAuCE,MAAvC,CACE,UAACC,KAAD;YAAA,OAAkBA,KAAK,CAACC,GAAN,KAAc,gBAAhC;WADF,EAEEC,MAFF,GAEW,CAHT,IAIJX,SAAS,CAACU,GAAV,KAAkB,WAJd,GAKA,CACE;YACEA,GAAG,EAAE,gBADP;YAEEH,IAAI,EAAE,QAFR;YAGEK,KAAK,EAAE,YAHT;YAIEC,WAAW,EAAE,qBAJf;YAKEC,QAAQ,EAAE,IALZ;YAMEC,OAAO,EAAEd,WAAW,CAACE,GAAZ,CAAgB,UAACa,KAAD;cAAA,OAAwB;gBAC/CC,KAAK,EAAED,KAAK,CAACC,KADkC;gBAE/CL,KAAK,EAAEI,KAAK,CAACJ,KAFkC;gBAG/CM,MAAM,EAAEF,KAAK,CAACC,KAHiC;gBAI/CE,IAAI,EAAEH,KAAK,CAACG,IAAN,IAAcC;eAJG;aAAhB;WAPb,CALA,GAoBA,EArBK,EAsBL,wBAAAhB,OAAO,CAACC,SAAR,yCAAmBE,IAAnB,MAA4B,kBAA5B,IACJ,CAAC,wBAAAH,OAAO,CAACC,SAAR,yCAAmBC,WAAnB,KAAkC,EAAnC,EAAuCE,MAAvC,CACE,UAACC,KAAD;YAAA,OAAkBA,KAAK,CAACC,GAAN,KAAc,0BAAhC;WADF,EAEEC,MAFF,GAEW,CAHP,GAIA,CACE;YACED,GAAG,EAAE,0BADP;YAEEH,IAAI,EAAE,QAFR;YAGEK,KAAK,EAAE,kBAHT;YAIEC,WAAW,EAAE,wBAJf;YAKEC,QAAQ,EAAE;WANd,CAJA,GAaA,EAnCK,EAoCN,CAAC,wBAAAV,OAAO,CAACC,SAAR,yCAAmBC,WAAnB,KAAkC,EAAnC,EAAuCE,MAAvC,CACD,UAACC,KAAD;YAAA,OACGT,SAAS,CAACU,GAAV,KAAkB,WAAlB,IACCD,KAAK,CAACC,GAAN,KAAc,gBADhB,IAEAV,SAAS,CAACU,GAAV,KAAkB,WAHpB;WADC,CApCM;;;KALjB,MAkDM,EArDV;IAsDEW,OAAO,EACL,uBAAArB,SAAS,CAACqB,OAAV,wCAAmBlB,GAAnB,CAAuB,UAACmB,MAAD;;;MACrB,oBACKA,MADL;QAEEjB,SAAS,eACJiB,MAAM,CAACjB,SADH;UAEPC,WAAW,YACJ,sBAAAgB,MAAM,CAACjB,SAAP,uCAAkBE,IAAlB,MAA2B,iBAA3B,IACH,CAAC,uBAAAe,MAAM,CAACjB,SAAP,wCAAkBC,WAAlB,KAAiC,EAAlC,EAAsCE,MAAtC,CACE,UAACC,KAAD;YAAA,OAAkBA,KAAK,CAACC,GAAN,KAAc,gBAAhC;WADF,EAEEC,MAFF,GAEW,CAHT,IAIJX,SAAS,CAACU,GAAV,KAAkB,WAJd,GAKA,CACE;YACEA,GAAG,EAAE,gBADP;YAEEH,IAAI,EAAE,QAFR;YAGEK,KAAK,EAAE,YAHT;YAIEC,WAAW,EAAE,qBAJf;YAKEC,QAAQ,EAAE,IALZ;YAMEC,OAAO,EAAEd,WAAW,CAACE,GAAZ,CAAgB,UAACa,KAAD;cAAA,OAAwB;gBAC/CC,KAAK,EAAED,KAAK,CAACC,KADkC;gBAE/CL,KAAK,EAAEI,KAAK,CAACJ,KAFkC;gBAG/CM,MAAM,EAAEF,KAAK,CAACC,KAHiC;gBAI/CE,IAAI,EAAEH,KAAK,CAACG,IAAN,IAAcC;eAJG;aAAhB;WAPb,CALA,GAoBA,EArBK,EAsBL,uBAAAE,MAAM,CAACjB,SAAP,wCAAkBE,IAAlB,MAA2B,iBAA3B,IACJ,CAAC,uBAAAe,MAAM,CAACjB,SAAP,wCAAkBC,WAAlB,KAAiC,EAAlC,EAAsCE,MAAtC,CACE,UAACC,KAAD;YAAA,OAAkBA,KAAK,CAACC,GAAN,KAAc,0BAAhC;WADF,EAEEC,MAFF,GAEW,CAHP,GAIA,CACE;YACED,GAAG,EAAE,0BADP;YAEEH,IAAI,EAAE,QAFR;YAGEK,KAAK,EAAE,kBAHT;YAIEC,WAAW,EAAE,wBAJf;YAKEC,QAAQ,EAAE;WANd,CAJA,GAaA,EAnCK,EAoCN,CAAC,uBAAAQ,MAAM,CAACjB,SAAP,wCAAkBC,WAAlB,KAAiC,EAAlC,EAAsCE,MAAtC,CACD,UAACC,KAAD;YAAA,OACGT,SAAS,CAACU,GAAV,KAAkB,WAAlB,IACCD,KAAK,CAACC,GAAN,KAAc,gBADhB,IAEAV,SAAS,CAACU,GAAV,KAAkB,WAHpB;WADC,CApCM;;;KALjB,MAkDM;;AAEX,CA/GM;AAiHA,IAAMa,aAAa,GAAG,SAAhBA,aAAgB,CAACvB,SAAD;EAC3B,oBACKA,SADL;IAEEE,QAAQ,EACNF,SAAS,CAACE,QAAV,IAAsBF,SAAS,CAACE,QAAV,CAAmBS,MAAnB,GAA4B,CAAlD,aAESX,SAAS,CAACE,QAAV,CAAmBM,MAAnB,CACD,UAACJ,OAAD;MAAA;;MAAA,OAAsB,sBAACA,OAAO,CAACoB,OAAT,aAAC,iBAAiBC,MAAlB,CAAtB;KADC,CAFT,IAMIL,SATR;IAUEC,OAAO,EACLrB,SAAS,CAACqB,OAAV,IAAqBrB,SAAS,CAACqB,OAAV,CAAkBV,MAAlB,GAA2B,CAAhD,aAESX,SAAS,CAACqB,OAAV,CAAkBb,MAAlB,CACD,UAACc,MAAD;MAAA;;MAAA,OAAoB,qBAACA,MAAM,CAACE,OAAR,aAAC,gBAAgBC,MAAjB,CAApB;KADC,CAFT,IAMIL;;AAET,CApBM;;ACvLP,IAAMM,oBAAoB,GACxB,qFADF;AAGA,IAAMC,oBAAoB,GACxB,qFADF;AAGA,IAAMC,WAAW,GAAG,iCAApB;AACA,IAAMC,mBAAmB,GAAG,yCAA5B;AAEA,IAAMC,WAAW,GAAG,0BAApB;AACA,IAAMC,mBAAmB,GAAG,kCAA5B;AAEA;;;;;;IAKMC;EAAN;;;;IAIU,UAAA,GAAuB,IAAvB;IAEA,WAAA,GAAwB,IAAxB;IAEA,gBAAA,GAA6B,IAA7B;;;;;;;;;;;;SAQRC,eAAA,sBAAavD,KAAb;IACE,IAAIA,KAAJ,EAAW;MACT,KAAKA,KAAL,GAAaA,KAAb;MACA,IAAMwD,YAAY,GAAGC,UAAU,CAAmBzD,KAAnB,CAA/B;MACA,KAAK0D,MAAL,GAAcF,YAAY,CAACG,GAAb,IAAoB,IAAlC;MACA,KAAKC,WAAL,GAAmBJ,YAAY,CAACK,SAAb,IAA0B,IAA7C;KAJF,MAKO;MACL,MAAM,IAAIlD,KAAJ,CAAU,gBAAV,CAAN;;;;;;;;;SAQJmD,WAAA;IACE,IAAI,CAAC,KAAK9D,KAAV,EAAiB;MACf,MAAM,IAAIW,KAAJ,CAAU,yBAAV,CAAN;;;IAEF,OAAO,KAAKX,KAAZ;;;;;;;;;;SASI+D;;;kGAAN,iBACEC,QADF,EAEEC,YAFF;MAAA;QAAA;UAAA;YAAA;cAAA,IAIO,KAAKjE,KAJZ;gBAAA;gBAAA;;;cAAA,MAKU,IAAIW,KAAJ,CAAU,yBAAV,CALV;;YAAA;cAAA,IAOOqD,QAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAIrD,KAAJ,CAAU,6BAAV,CARV;;YAAA;cAAA,IAUOqD,QAAQ,CAACE,OAVhB;gBAAA;gBAAA;;;cAAA,MAWU,IAAIvD,KAAJ,CAAU,8BAAV,CAXV;;YAAA;cAAA;cAAA,OAaed,iBAAiB,CAC5B,mBAD4B;gBAG1BmE,QAAQ,EAAEA;iBACN,OAAOC,YAAP,KAAwB,WAAxB,IAAuC;gBAAEA,YAAY,EAAZA;eAJnB,GAM5B,KAAKjE,KANuB,CAbhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SA6BMmE;;;iGAAN,kBAAoBF,YAApB;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKjE,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA;cAAA,OAIed,iBAAiB,CAC5B,kBAD4B,eAGtB,OAAOoE,YAAP,KAAwB,WAAxB,IAAuC;gBAAEA,YAAY,EAAZA;eAHnB,GAK5B,KAAKjE,KALuB,CAJhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SAoBMoE;;;kGAAN,kBAAqBpC,GAArB,EAAkCgC,QAAlC;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKhE,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,0BAAV,CALV;;YAAA;cAAA,MAOM,CAACqD,QAAD,IAAa,CAACA,QAAQ,CAACE,OAP7B;gBAAA;gBAAA;;;cAAA,MAQU,IAAIvD,KAAJ,CAAU,8BAAV,CARV;;YAAA;cAAA;cAAA,OAUed,iBAAiB,CAC5B,mBAD4B,EAE5B;gBACEmC,GAAG,EAAHA,GADF;gBAEEgC,QAAQ,EAARA;eAJ0B,EAM5B,KAAKhE,KANuB,CAVhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;;SA6BMqE;;;yGAAN,kBACEC,WADF,EAEEC,KAFF,EAGEC,KAHF,EAIEC,KAJF;MAAA;QAAA;UAAA;YAAA;cAAA,IAMO,KAAKzE,KANZ;gBAAA;gBAAA;;;cAAA,MAOU,IAAIW,KAAJ,CAAU,yBAAV,CAPV;;YAAA;cAAA,IASO2D,WATP;gBAAA;gBAAA;;;cAAA,MAUU,IAAI3D,KAAJ,CAAU,0BAAV,CAVV;;YAAA;cAAA;cAAA,OAYed,iBAAiB,CAC5B,0BAD4B;gBAG1ByE,WAAW,EAAXA;iBACI,OAAOC,KAAP,KAAiB,WAAjB,IAAgC;gBAAEA,KAAK,EAALA;eAJZ,EAKtB,OAAOC,KAAP,KAAiB,WAAjB,IAAgC;gBAAEA,KAAK,EAALA;eALZ,EAMtB,OAAOC,KAAP,KAAiB,WAAjB,IAAgC;gBAAEA,KAAK,EAALA;eANZ,GAQ5B,KAAKzE,KARuB,CAZhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SA8BM0E;;;2GAAN,kBAA8BC,WAA9B;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK3E,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOgE,WAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIhE,KAAJ,CAAU,mCAAV,CALV;;YAAA;cAAA;cAAA,OAOed,iBAAiB,CAC5B,4BAD4B,EAE5B;gBACE8E,WAAW,EAAXA;eAH0B,EAK5B,KAAK3E,KALuB,CAPhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SAsBM4E;;;iGAAN,kBAAoBC,GAApB;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK7E,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA;cAAA,OAIed,iBAAiB,CAC5B,kBAD4B,EAE5B;gBAAEgF,GAAG,EAAEA,GAAG,IAAInC;eAFc,EAG5B,KAAK1C,KAHuB,CAJhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAmBM8E;;;8FAAN,kBACEC,IADF,EAEEC,KAFF,EAGEC,WAHF;MAAA;QAAA;UAAA;YAAA;cAAA,IAKO,KAAKjF,KALZ;gBAAA;gBAAA;;;cAAA,MAMU,IAAIW,KAAJ,CAAU,yBAAV,CANV;;YAAA;cAAA,IAQOoE,IARP;gBAAA;gBAAA;;;cAAA,MASU,IAAIpE,KAAJ,CAAU,kCAAV,CATV;;YAAA;cAAA,IAWOqE,KAXP;gBAAA;gBAAA;;;cAAA,MAYU,IAAIrE,KAAJ,CAAU,iCAAV,CAZV;;YAAA;cAAA;cAAA,OAced,iBAAiB,CAC5B,eAD4B,EAE5B;gBACEkF,IAAI,EAAJA,IADF;gBAEEC,KAAK,EAALA,KAFF;gBAGEC,WAAW,EAAEA,WAAW,IAAI;eALF,EAO5B,KAAKjF,KAPuB,CAdhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;SA8BMkF;;;iGAAN;MAAA;;MAAA;QAAA;UAAA;YAAA;cACQC,SADR,GACoB,EADpB;cAAA;cAAA,OAE+BhF,KAAK,CAACiF,GAAN,CAAUpC,oBAAV,CAF/B;;YAAA;cAEQqC,cAFR;cAGWC,CAHX,GAGe,CAHf;;YAAA;cAAA,MAGkBA,CAAC,GAAGD,cAAc,CAAC5E,IAAf,CAAoBwB,MAH1C;gBAAA;gBAAA;;;cAIUb,GAJV,GAIgBiE,cAAc,CAAC5E,IAAf,CAAoB6E,CAApB,EAAuBC,YAJvC;;cAAA,KAKQnE,GALR;gBAAA;gBAAA;;;cAAA,eAMM+D,SANN;cAAA;cAAA,OAM2BhF,KAAK,CAACiF,GAAN,CAAUhE,GAAV,CAN3B;;YAAA;cAAA;;cAAA,aAMgBoE,IANhB;;YAAA;cAGkDF,CAAC,EAHnD;cAAA;cAAA;;YAAA;cAAA;cAAA,OAS+BnF,KAAK,CAACiF,GAAN,CAAUnC,oBAAV,CAT/B;;YAAA;cASQwC,cATR;cAUWH,EAVX,GAUe,CAVf;;YAAA;cAAA,MAUkBA,EAAC,GAAGG,cAAc,CAAChF,IAAf,CAAoBwB,MAV1C;gBAAA;gBAAA;;;cAWUb,IAXV,GAWgBqE,cAAc,CAAChF,IAAf,CAAoB6E,EAApB,EAAuBC,YAXvC;;cAAA,KAYQnE,IAZR;gBAAA;gBAAA;;;cAAA,eAaM+D,SAbN;cAAA;cAAA,OAa2BhF,KAAK,CAACiF,GAAN,CAAUhE,IAAV,CAb3B;;YAAA;cAAA;;cAAA,aAagBoE,IAbhB;;YAAA;cAUkDF,EAAC,EAVnD;cAAA;cAAA;;YAAA;cAAA,kCAiBSH,SAAS,CACbrD,MADI,CACG,UAAAtB,GAAG;gBAAA,OAAIA,GAAG,IAAIA,GAAG,CAACC,IAAf;eADN,EAEJgB,GAFI,CAEA,UAAAjB,GAAG;gBAAA,oBACHA,GAAG,CAACC,IADD;kBAENiF,QAAQ,EACLC,KAAK,CAACC,OAAN,CAAcH,cAAc,CAAChF,IAA7B,KACCgF,cAAc,CAAChF,IAAf,CAAoBoF,IAApB,CACE,UAAAC,CAAC;oBAAA,OAAIA,CAAC,CAACC,IAAF,IAAUD,CAAC,CAACC,IAAF,CAAOC,QAAP,CAAgBxF,GAAG,CAACC,IAAJ,CAASuB,GAAzB,CAAd;mBADH,CADD,IAICyD,cAAc,CAAChF,IAAf,CAAoBoF,IAApB,CACE,UAAAC,CAAC;oBAAA,OAAIA,CAAC,CAACC,IAAF,IAAUD,CAAC,CAACC,IAAF,CAAOC,QAAP,CAAgBxF,GAAG,CAACC,IAAJ,CAASuB,GAAzB,CAAd;mBADH,EAEE0D,QANJ,IAOCC,KAAK,CAACC,OAAN,CAAcP,cAAc,CAAC5E,IAA7B,KACC4E,cAAc,CAAC5E,IAAf,CAAoBoF,IAApB,CACE,UAAAC,CAAC;oBAAA,OAAIA,CAAC,CAACC,IAAF,IAAUD,CAAC,CAACC,IAAF,CAAOC,QAAP,CAAgBxF,GAAG,CAACC,IAAJ,CAASuB,GAAzB,CAAd;mBADH,CADD,IAICqD,cAAc,CAAC5E,IAAf,CAAoBoF,IAApB,CACE,UAAAC,CAAC;oBAAA,OAAIA,CAAC,CAACC,IAAF,IAAUD,CAAC,CAACC,IAAF,CAAOC,QAAP,CAAgBxF,GAAG,CAACC,IAAJ,CAASuB,GAAzB,CAAd;mBADH,EAEE0D,QAbJ,IAcA;;eAnBC,CAjBT;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SA8CMO;;;kGAAN,kBAAqBjE,GAArB;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKhC,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,0BAAV,CALV;;YAAA;cAAA;cAAA,OAOed,iBAAiB,CAC5B,mBAD4B,EAE5B;gBACEmC,GAAG,EAAHA;eAH0B,EAK5B,KAAKhC,KALuB,CAPhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAwBMkG;;;sGAAN,mBACEC,KADF,EAEEC,MAFF,EAGEvB,GAHF;MAAA;QAAA;UAAA;YAAA;cAAA,IAKO,KAAK7E,KALZ;gBAAA;gBAAA;;;cAAA,MAMU,IAAIW,KAAJ,CAAU,yBAAV,CANV;;YAAA;cAAA,IAQOwF,KARP;gBAAA;gBAAA;;;cAAA,MASU,IAAIxF,KAAJ,CAAU,mBAAV,CATV;;YAAA;cAAA,IAWO,uCAAuC0F,IAAvC,CAA4CF,KAA5C,CAXP;gBAAA;gBAAA;;;cAAA,MAYU,IAAIxF,KAAJ,CAAU,eAAV,CAZV;;YAAA;cAAA;cAAA,OAced,iBAAiB,CAC5B,uBAD4B,EAE5B;gBACEsG,KAAK,EAALA,KADF;gBAEEC,MAAM,EAAEA,MAAM,IAAI,EAFpB;gBAGEvB,GAAG,EAAEA,GAAG,IAAI;eALc,EAO5B,KAAK7E,KAPuB,CAdhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SAgCMsG;;;qGAAN,mBAAwBC,aAAxB,EAA+CJ,KAA/C;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKnG,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIO4F,aAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAI5F,KAAJ,CAAU,4BAAV,CALV;;YAAA;cAAA,MAOMwF,KAAK,IAAI,CAAC,uCAAuCE,IAAvC,CAA4CF,KAA5C,CAPhB;gBAAA;gBAAA;;;cAAA,MAQU,IAAIxF,KAAJ,CAAU,eAAV,CARV;;YAAA;cAAA;cAAA,OAUed,iBAAiB,CAC5B,sBAD4B,EAE5B;gBACEsG,KAAK,EAALA,KADF;gBAEEI,aAAa,EAAbA;eAJ0B,EAM5B,KAAKvG,KANuB,CAVhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;;SA6BMwG;;;qGAAN,mBACEC,YADF,EAEEC,YAFF,EAGEC,IAHF,EAIE1B,WAJF;MAAA;QAAA;UAAA;YAAA;cAAA,IAMO,KAAKjF,KANZ;gBAAA;gBAAA;;;cAAA,MAOU,IAAIW,KAAJ,CAAU,yBAAV,CAPV;;YAAA;cAAA,IASO8F,YATP;gBAAA;gBAAA;;;cAAA,MAUU,IAAI9F,KAAJ,CAAU,2BAAV,CAVV;;YAAA;cAAA,IAYO+F,YAZP;gBAAA;gBAAA;;;cAAA,MAaU,IAAI/F,KAAJ,CAAU,2BAAV,CAbV;;YAAA;cAAA,IAeOgG,IAfP;gBAAA;gBAAA;;;cAAA,MAgBU,IAAIhG,KAAJ,CAAU,qCAAV,CAhBV;;YAAA;cAAA,MAkBM,CAACgG,IAAI,CAAC7G,MAAN,IAAgB6G,IAAI,CAAC7G,MAAL,KAAgB,oCAlBtC;gBAAA;gBAAA;;;cAAA,MAmBU,IAAIa,KAAJ,CACJ,qGADI,CAnBV;;YAAA;cAAA,MAuBM,CAACgG,IAAI,CAACtG,OAAN,IAAiBsG,IAAI,CAACtG,OAAL,KAAiB,KAvBxC;gBAAA;gBAAA;;;cAAA,MAwBU,IAAIM,KAAJ,CAAU,+CAAV,CAxBV;;YAAA;cAAA,MA0BM,CAACgG,IAAI,CAAC5G,MAAN,IAAgB,CAAC4G,IAAI,CAAC5G,MAAL,CAAYiC,GA1BnC;gBAAA;gBAAA;;;cAAA,MA2BU,IAAIrB,KAAJ,CACJ,kFADI,CA3BV;;YAAA;cAAA,MA+BMgG,IAAI,CAAC5G,MAAL,CAAYiC,GAAZ,KAAoB0E,YA/B1B;gBAAA;gBAAA;;;cAAA,MAgCU,IAAI/F,KAAJ,CACJ,6EADI,CAhCV;;YAAA;cAAA;cAAA,OAoCeM,qBAAqB,CAChC,MADgC,uBAEbwF,YAFa,SAEGC,YAFH,IAG9BzB,WAAW,GAAG,2BAA2BA,WAA9B,GAA4C,EAHzB,GAKhC0B,IALgC,EAMhC,KAAK3G,KAN2B,CApCpC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;;SAuDM4G;;;+FAAN,mBACEH,YADF,EAEEC,YAFF,EAGEC,IAHF,EAIE1B,WAJF;MAAA;QAAA;UAAA;YAAA;cAAA,IAMOwB,YANP;gBAAA;gBAAA;;;cAAA,MAOU,IAAI9F,KAAJ,CAAU,2BAAV,CAPV;;YAAA;cAAA,IASO+F,YATP;gBAAA;gBAAA;;;cAAA,MAUU,IAAI/F,KAAJ,CAAU,2BAAV,CAVV;;YAAA;cAAA,IAYOgG,IAZP;gBAAA;gBAAA;;;cAAA,MAaU,IAAIhG,KAAJ,CAAU,yBAAV,CAbV;;YAAA;cAAA;cAAA,OAeeM,qBAAqB,CAChC,MADgC,gBAEpBwF,YAFoB,SAEJC,YAFI,IAG9BzB,WAAW,GAAG,2BAA2BA,WAA9B,GAA4C,EAHzB,GAKhC0B,IALgC,CAfpC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SA+BME;;;+FAAN,mBAAkB5B,WAAlB;MAAA;;MAAA;MAAA;QAAA;UAAA;YAAA;cACM6B,eADN,GAC2B1D,WAD3B;;cAGE,IAAI6B,WAAW,IAAIA,WAAW,KAAK,SAAnC,EAA8C;gBAC5C6B,eAAe,GAAMzD,mBAAN,iBAAf;;;cAJJ;cAAA,OAMoBlD,KAAK,CAACiF,GAAN,CAAU0B,eAAV,WAAiC;gBACjD,OAAO,IAAP;eADgB,CANpB;;YAAA;cAMQtG,GANR;;cAAA,MASMA,GAAG,IAAIA,GAAG,CAACC,IATjB;gBAAA;gBAAA;;;cAUUsG,OAVV,GAUoBC,MAAM,CAACC,IAAP,CAAYzG,GAAG,CAACC,IAAhB,EACbgB,GADa,CACT,UAAAO,GAAG;gBAAA,OACNa,aAAa,cACRrC,GAAG,CAACC,IAAJ,CAASuB,GAAT,CADQ,EADP;eADM,EAMbF,MANa,CAOZ,UAACoF,MAAD;gBAAA;;gBAAA,OACEA,MAAM,KACL,CAACA,MAAM,CAACC,MAAR,IACC,mBAAAD,MAAM,CAACC,MAAP,oCAAeC,WAAf,QAAiC,QADlC,IAEE,KAAI,CAAC1D,MAAL,IACC,oBAAAwD,MAAM,CAACC,MAAP,qCAAeC,WAAf,QAAiC,SADlC,IAEC,iBAAAF,MAAM,CAACG,IAAP,kCAAaD,WAAb,QAA+B,KAAI,CAAC1D,MAAL,CAAY0D,WAAZ,EAJlC,IAKE,KAAI,CAACxD,WAAL,IACC,oBAAAsD,MAAM,CAACC,MAAP,qCAAeC,WAAf,QAAiC,WADlC,IAEC,sBAAAF,MAAM,CAACrD,SAAP,uCAAkBuD,WAAlB,QACE,KAAI,CAACxD,WAAL,CAAiBwD,WAAjB,EATA,CADR;eAPY,CAVpB;cAAA,mCA6BWL,OA7BX;;YAAA;cAAA,mCA+BW,EA/BX;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;;SA4CMO;;;6FAAN,mBACEC,SADF,EAEEtC,WAFF,EAGEuC,MAHF;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IAGEA,MAHF;gBAGEA,MAHF,GAGoB,IAHpB;;;cAAA,IAKOD,SALP;gBAAA;gBAAA;;;cAAA,MAMU,IAAI5G,KAAJ,CAAU,qBAAV,CANV;;YAAA;cAQM8G,SARN,GAQqBrE,WARrB,SAQoCmE,SARpC;;cAUE,IAAItC,WAAW,IAAIA,WAAW,KAAK,SAAnC,EAA8C;gBAC5CwC,SAAS,GAAMpE,mBAAN,SAA6BkE,SAA7B,UAAT;;;cAXJ;cAAA,OAaoBpH,KAAK,CAACiF,GAAN,CAAUqC,SAAV,WAA2B;gBAC3C,OAAO,IAAP;eADgB,CAbpB;;YAAA;cAaQjH,GAbR;;cAAA,MAiBMA,GAAG,IAAIA,GAAG,CAACC,IAjBjB;gBAAA;gBAAA;;;cAAA,KAkBQ+G,MAlBR;gBAAA;gBAAA;;;cAAA;cAAA,OAmBgC,KAAKE,UAAL,CACxB,KADwB,EAExBzC,WAAW,IAAI,YAFS,CAnBhC;;YAAA;cAmBY1D,WAnBZ;cAAA,mCAuBaF,YAAY,CAACwB,aAAa,CAACrC,GAAG,CAACC,IAAL,CAAd,EAA0Bc,WAAW,IAAI,EAAzC,CAvBzB;;YAAA;cAAA,mCAyBasB,aAAa,CAACrC,GAAG,CAACC,IAAL,CAzB1B;;YAAA;cAAA;cAAA;;YAAA;cAAA,mCA4BW,IA5BX;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SAsCMkH;;;kGAAN;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK3H,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA;cAAA,OAIed,iBAAiB,CAAC,mBAAD,EAAsB,EAAtB,EAA0B,KAAKG,KAA/B,CAJhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SAcM4H;;;mGAAN,mBAAsB/D,SAAtB;MAAA;QAAA;UAAA;YAAA;cAAA,IAOO,KAAK7D,KAPZ;gBAAA;gBAAA;;;cAAA,MAQU,IAAIW,KAAJ,CAAU,yBAAV,CARV;;YAAA;cAAA,IAUOkD,SAAS,CAACgE,KAVjB;gBAAA;gBAAA;;;cAAA,MAWU,IAAIlH,KAAJ,CAAU,6BAAV,CAXV;;YAAA;cAAA;cAAA,OAaed,iBAAiB,CAAC,oBAAD,EAAuBgE,SAAvB,EAAkC,KAAK7D,KAAvC,CAbhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SAuBM8H;;;mGAAN,mBAAsBjE,SAAtB;MAAA;QAAA;UAAA;YAAA;cAAA,IAQO,KAAK7D,KARZ;gBAAA;gBAAA;;;cAAA,MASU,IAAIW,KAAJ,CAAU,yBAAV,CATV;;YAAA;cAAA,IAWOkD,SAAS,CAAC7B,GAXjB;gBAAA;gBAAA;;;cAAA,MAYU,IAAIrB,KAAJ,CAAU,2BAAV,CAZV;;YAAA;cAAA,MAcMkD,SAAS,CAACkE,MAAV,IAAoB,CAACpC,KAAK,CAACC,OAAN,CAAc/B,SAAS,CAACkE,MAAxB,CAd3B;gBAAA;gBAAA;;;cAAA,MAeU,IAAIpH,KAAJ,CAAU,yBAAV,CAfV;;YAAA;cAAA,MAiBMkD,SAAS,CAACmE,KAAV,IAAmB,CAACrC,KAAK,CAACC,OAAN,CAAc/B,SAAS,CAACmE,KAAxB,CAjB1B;gBAAA;gBAAA;;;cAAA,MAkBU,IAAIrH,KAAJ,CAAU,wBAAV,CAlBV;;YAAA;cAAA;cAAA,OAoBed,iBAAiB,CAAC,oBAAD,EAAuBgE,SAAvB,EAAkC,KAAK7D,KAAvC,CApBhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SA8BMiI;;;kGAAN,mBAAqBjG,GAArB;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKhC,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,2BAAV,CALV;;YAAA;cAAA;cAAA,OAOed,iBAAiB,CAAC,mBAAD,EAAsB;gBAAEmC,GAAG,EAAHA;eAAxB,EAA+B,KAAKhC,KAApC,CAPhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SAiBMkI;;;mGAAN,mBAAsBlG,GAAtB;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKhC,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,2BAAV,CALV;;YAAA;cAAA;cAAA,OAOed,iBAAiB,CAAC,oBAAD,EAAuB;gBAAEmC,GAAG,EAAHA;eAAzB,EAAgC,KAAKhC,KAArC,CAPhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAkBMmI;;;2GAAN,mBACE7D,WADF,EAEEL,YAFF;MAAA;QAAA;UAAA;YAAA;cAAA,IAIO,KAAKjE,KAJZ;gBAAA;gBAAA;;;cAAA,MAKU,IAAIW,KAAJ,CAAU,yBAAV,CALV;;YAAA;cAAA,IAOO2D,WAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAI3D,KAAJ,CAAU,0BAAV,CARV;;YAAA;cAAA;cAAA,OAUed,iBAAiB,CAC5B,4BAD4B,EAE5B;gBAAEmC,GAAG,EAAEsC,WAAP;gBAAoB8D,eAAe,EAAEnE;eAFT,EAG5B,KAAKjE,KAHuB,CAVhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAyBMqI;;;sGAAN,mBAAyBrG,GAAzB,EAAsCsG,aAAtC;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKtI,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,2BAAV,CALV;;YAAA;cAAA,IAOO2H,aAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAI3H,KAAJ,CAAU,qBAAV,CARV;;YAAA;cAAA;cAAA,OAUed,iBAAiB,CAC5B,qBAD4B,EAE5B;gBAAEmC,GAAG,EAAEA,GAAP;gBAAYuG,SAAS,EAAED;eAFK,EAG5B,KAAKtI,KAHuB,CAVhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAyBMwI;;;2GAAN,mBACExG,GADF,EAEEsG,aAFF;MAAA;QAAA;UAAA;YAAA;cAAA,IAIO,KAAKtI,KAJZ;gBAAA;gBAAA;;;cAAA,MAKU,IAAIW,KAAJ,CAAU,yBAAV,CALV;;YAAA;cAAA,IAOOqB,GAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAIrB,KAAJ,CAAU,2BAAV,CARV;;YAAA;cAAA,IAUO2H,aAVP;gBAAA;gBAAA;;;cAAA,MAWU,IAAI3H,KAAJ,CAAU,qBAAV,CAXV;;YAAA;cAAA;cAAA,OAaed,iBAAiB,CAC5B,wBAD4B,EAE5B;gBAAEmC,GAAG,EAAEA,GAAP;gBAAYuG,SAAS,EAAED;eAFK,EAG5B,KAAKtI,KAHuB,CAbhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SA4BMyI;;;uGAAN,mBAA0BzG,GAA1B,EAAuCsG,aAAvC;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKtI,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,2BAAV,CALV;;YAAA;cAAA,IAOO2H,aAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAI3H,KAAJ,CAAU,qBAAV,CARV;;YAAA;cAAA;cAAA,OAUed,iBAAiB,CAC5B,sBAD4B,EAE5B;gBAAEmC,GAAG,EAAEA,GAAP;gBAAYuG,SAAS,EAAED;eAFK,EAG5B,KAAKtI,KAHuB,CAVhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAyBM0I;;;4GAAN,mBACE1G,GADF,EAEEsG,aAFF;MAAA;QAAA;UAAA;YAAA;cAAA,IAIO,KAAKtI,KAJZ;gBAAA;gBAAA;;;cAAA,MAKU,IAAIW,KAAJ,CAAU,yBAAV,CALV;;YAAA;cAAA,IAOOqB,GAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAIrB,KAAJ,CAAU,2BAAV,CARV;;YAAA;cAAA,IAUO2H,aAVP;gBAAA;gBAAA;;;cAAA,MAWU,IAAI3H,KAAJ,CAAU,qBAAV,CAXV;;YAAA;cAAA;cAAA,OAaed,iBAAiB,CAC5B,yBAD4B,EAE5B;gBAAEmC,GAAG,EAAEA,GAAP;gBAAYuG,SAAS,EAAED;eAFK,EAG5B,KAAKtI,KAHuB,CAbhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SA4BM2I;;;uGAAN,mBACEC,WADF,EAEE3D,WAFF;MAAA;QAAA;UAAA;YAAA;cAAA,IAIO,KAAKjF,KAJZ;gBAAA;gBAAA;;;cAAA,MAKU,IAAIW,KAAJ,CAAU,yBAAV,CALV;;YAAA;cAAA,IAOOiI,WAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAIjI,KAAJ,CAAU,0BAAV,CARV;;YAAA;cAAA,IAUOsE,WAVP;gBAAA;gBAAA;;;cAAA,MAWU,IAAItE,KAAJ,CAAU,yBAAV,CAXV;;YAAA;cAAA;cAAA,OAaed,iBAAiB,CAC5B,wBAD4B,EAE5B;gBAAE+I,WAAW,EAAEA,WAAf;gBAA4B3D,WAAW,EAAEA;eAFb,EAG5B,KAAKjF,KAHuB,CAbhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SA4BM6I;;;yGAAN,mBAA4B7G,GAA5B,EAAyC8G,WAAzC;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK9I,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOqB,GAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIrB,KAAJ,CAAU,4BAAV,CALV;;YAAA;cAAA,IAOOmI,WAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAInI,KAAJ,CAAU,0BAAV,CARV;;YAAA;cAAA;cAAA,OAUed,iBAAiB,CAC5B,0BAD4B,EAE5B;gBAAEmC,GAAG,EAAEA,GAAP;gBAAY8G,WAAW,EAAEA;eAFG,EAG5B,KAAK9I,KAHuB,CAVhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;;SA0BM+I;;;uGAAN,mBACEH,WADF,EAEEI,OAFF,EAGE/D,WAHF;MAAA;QAAA;UAAA;YAAA;cAAA,IAKO,KAAKjF,KALZ;gBAAA;gBAAA;;;cAAA,MAMU,IAAIW,KAAJ,CAAU,yBAAV,CANV;;YAAA;cAAA,IAQOiI,WARP;gBAAA;gBAAA;;;cAAA,MASU,IAAIjI,KAAJ,CAAU,0BAAV,CATV;;YAAA;cAAA,IAWOqI,OAXP;gBAAA;gBAAA;;;cAAA,MAYU,IAAIrI,KAAJ,CAAU,4BAAV,CAZV;;YAAA;cAAA,IAcOsE,WAdP;gBAAA;gBAAA;;;cAAA,MAeU,IAAItE,KAAJ,CAAU,yBAAV,CAfV;;YAAA;cAAA;cAAA,OAiBed,iBAAiB,CAC5B,wBAD4B,EAE5B;gBAAE+I,WAAW,EAAEA,WAAf;gBAA4BI,OAAO,EAAEA,OAArC;gBAA8C/D,WAAW,EAAEA;eAF/B,EAG5B,KAAKjF,KAHuB,CAjBhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SA+BMiJ;;;0GAAN,mBACEC,KADF,EAEEC,iBAFF;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IAIO,KAAKnJ,KAJZ;gBAAA;gBAAA;;;cAAA,MAKU,IAAIW,KAAJ,CAAU,yBAAV,CALV;;YAAA;cAAA,IAOOuI,KAPP;gBAAA;gBAAA;;;cAAA,MAQU,IAAIvI,KAAJ,CAAU,iCAAV,CARV;;YAAA;cAUQyI,OAVR,GAUiE;gBAC7DF,KAAK,EAALA;eAXJ;;cAaE,IAAIC,iBAAJ,EAAuB;gBACrBC,OAAO,CAACD,iBAAR,GAA4BA,iBAA5B;;;cAdJ;cAAA,OAgBetJ,iBAAiB,CAC5B,2BAD4B,EAE5BuJ,OAF4B,EAG5B,KAAKpJ,KAHuB,CAhBhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;;SAgCMqJ;;;6FAAN,mBACEtE,IADF,EAEEC,KAFF,EAGEC,WAHF;MAAA;QAAA;UAAA;YAAA;cAAA,IAKO,KAAKjF,KALZ;gBAAA;gBAAA;;;cAAA,MAMU,IAAIW,KAAJ,CAAU,yBAAV,CANV;;YAAA;cAAA,IAQOoE,IARP;gBAAA;gBAAA;;;cAAA,MASU,IAAIpE,KAAJ,CAAU,kCAAV,CATV;;YAAA;cAAA,IAWOqE,KAXP;gBAAA;gBAAA;;;cAAA,MAYU,IAAIrE,KAAJ,CAAU,iCAAV,CAZV;;YAAA;cAAA;cAAA,OAced,iBAAiB,CAC5B,cAD4B,EAE5B;gBACEkF,IAAI,EAAJA,IADF;gBAEEC,KAAK,EAALA,KAFF;gBAGEC,WAAW,EAAEA,WAAW,IAAI;eALF,EAO5B,KAAKjF,KAPuB,CAdhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;;SAiCM0H;;;8FAAN,mBACE7F,IADF,EAEEoD,WAFF;MAAA;MAAA;QAAA;UAAA;YAAA;cAAA,IACEpD,IADF;gBACEA,IADF,GACoC,KADpC;;;cAIMyH,IAJN,QAIgBpG,WAJhB;;cAME,IAAI+B,WAAW,IAAIA,WAAW,KAAK,SAAnC,EAA8C;gBAC5CqE,IAAI,QAAMnG,mBAAV;;;cAEE/B,GATN,GASYkI,IATZ;;cAUE,IAAIzH,IAAI,KAAK,KAAb,EAAoB;gBAClBT,GAAG,GAAMkI,IAAN,iBAAH;;;cAEF,IAAIzH,IAAI,KAAK,KAAb,EAAoB;gBAClBT,GAAG,GAAMkI,IAAN,cAAH;;;cAEF,IAAIzH,IAAI,KAAK,SAAb,EAAwB;gBACtBT,GAAG,GAAMkI,IAAN,kBAAH;;;cAjBJ;cAAA,OAmBoBnJ,KAAK,CAACiF,GAAN,CAAUhE,GAAV,WAAqB;gBACrC,OAAO,IAAP;eADgB,CAnBpB;;YAAA;cAmBQZ,GAnBR;cAAA,mCAuBUA,GAAG,IAAIA,GAAG,CAACC,IAAZ,IAAqB,EAvB9B;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;;SAiCA8I,UAAA;IAME,IAAI,CAAC,KAAKvJ,KAAN,IAAe,CAAC,KAAK0D,MAAzB,EAAiC;MAC/B,OAAO,IAAP;;;IAEF,IAAMpD,EAAE,GAAG,KAAKoD,MAAhB;IACA,IAAM8F,OAAO,GAAGlJ,EAAE,CAACmJ,KAAH,CAAS,GAAT,EAAc,CAAd,CAAhB;IACA,IAAMC,aAAa,GAAMF,OAAO,CAACG,SAAR,CAAkB,CAAlB,EAAqB,CAArB,CAAN,WAAmCH,OAAO,CAACG,SAAR,CACpDH,OAAO,CAACvH,MAAR,GAAiB,CADmC,CAAtD;IAGA,OAAO;MACL3B,EAAE,EAAFA,EADK;MAELkJ,OAAO,EAAPA,OAFK;MAGLE,aAAa,EAAbA,aAHK;MAIL7F,SAAS,EAAE,KAAKD,WAAL,IAAoB;KAJjC;;;;;;;;;;SAcIgG;;;kGAAN;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK5J,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA;cAAA,OAIed,iBAAiB,CAAC,mBAAD,EAAsB,EAAtB,EAA0B,KAAKG,KAA/B,CAJhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SAaM6J;;;mGAAN,mBAAsB1D,KAAtB;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAKnG,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA,IAIOwF,KAJP;gBAAA;gBAAA;;;cAAA,MAKU,IAAIxF,KAAJ,CAAU,mBAAV,CALV;;YAAA;cAAA;cAAA,OAOed,iBAAiB,CAAC,oBAAD,EAAuB;gBAAEsG,KAAK,EAALA;eAAzB,EAAkC,KAAKnG,KAAvC,CAPhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SAgBM8J;;;8FAAN;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK9J,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA;cAAA,OAIed,iBAAiB,CAAC,eAAD,EAAkB,EAAlB,EAAsB,KAAKG,KAA3B,CAJhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;;;SAaM+J;;;gGAAN;MAAA;QAAA;UAAA;YAAA;cAAA,IACO,KAAK/J,KADZ;gBAAA;gBAAA;;;cAAA,MAEU,IAAIW,KAAJ,CAAU,yBAAV,CAFV;;YAAA;cAAA;cAAA,OAIed,iBAAiB,CAAC,iBAAD,EAAoB,EAApB,EAAwB,KAAKG,KAA7B,CAJhC;;YAAA;cAAA;;YAAA;YAAA;cAAA;;;;;;;;;;;;;;;;;;"}